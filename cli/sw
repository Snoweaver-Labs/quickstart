#!/bin/bash

usage() {
  echo '''
usage:  sw  [get|put] <file>|all [-trunc] [-c value]
            [import|export] all [-d] [-c value]
                            type [-c value]
                            type resource [-l] [-c value]
            test job <job> [-c value]
                job <job> <components> [-c value]
                job <job> <component> <test.j2> [-c value]
                lib <lib> [-c value]
                lib <lib> <lib.j2> <test.j2> [-c value]
                func <func> [-c value]
                func <func> <def.py> <test.j2> [-c value]
            build <job>|all [-c value]
            preview <job> [-c value]
            testcall <job> [-c value] [-p]

            -c: Specifies the connection to be used by SnowSQL. 
                If this option is not provided, SnowSQL will use the default connection. 
                If the default connection fails, you will be prompted to enter your credentials.
            -d: `get` - Deletes all .yaml files in the local directory before proceeding.
                `put`,`export` - Purges the CODE stage prior to execution.
                `import` - Clears all project data before beginning the import process.
            -l: Directs Snoweaver to export to or import from a local file instead of the CODE stage.
            -p: Enables the post-hook functionality.
      '''
}

# Initialize variables
positional=()
delete=0
conn=""
local=0
posthook=0


while [[ $# -gt 0 && $1 != -* ]]; do
  positional+=("$1")
  shift
done

# Parse options using getopts
while getopts ":dptlpc:" opt; do
  case $opt in
    d)
      delete=1
      ;;     
    l)
      local=1
      ;;
    p)
      posthook=1
      ;;      
    c)
      conn="-c $OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

# Shift processed options away
shift $((OPTIND - 1))

op=${positional[0]}

case $op in
    get | put)
      file=${positional[1]}
      if [[ $file == "" ]] ; then
        echo "File name or 'all' is required."
        exit 1
      fi
      ;;
    import | export)
      type=${positional[1]}
      resource=${positional[2]}
      ;;
    test)
      type=${positional[1]}
      case $type in
            job)
              job=${positional[2]}
              components=${positional[3]}
              test_file=${positional[4]}
              ;;
            lib)
              lib=${positional[2]}
              lib_file=${positional[3]}
              test_file=${positional[4]}
              if [[ "${lib_file}" != "" && "${test_file}" == "" ]] ; then
                echo "Test file is required."
                exit 1
              fi
              ;;
            func)
              func=${positional[2]}
              def_file=${positional[3]}
              test_file=${positional[4]}
              if [[ "${def_file}" != "" && "${test_file}" == "" ]] ; then
                echo "Test file is required."
                exit 1
              fi
              ;;
            *)
              echo "Invalid option - ${positional[1]}." >&2
              exit 1
              ;;                        
      esac
      ;;
    build | preview | testcall)
      job=${positional[1]}
      ;;    
    "")
      usage
      ;;
    *)
      echo "Invalid option - ${positional[0]}." >&2
      exit 1
      ;;        
esac


# Get and Put

if [[ $file == all ]] ; then
  if [[ $op == get ]] ; then
    PATTERN=
  elif [[ $op == put ]] ; then
    PATTERN=*.yaml
  fi
else
  PATTERN=$file
fi


if [[ $delete -eq 1 && $file == all && $op == get ]] ; then
  echo Deleting existing YAML files...
  rm ./*.yaml 2>/dev/null
fi

if [[ $op == get ]] ; then
  snowsql -o log_level=DEBUG  ${conn} -q "GET @CODE/${PATTERN} file://. "
fi


if [[ $delete -eq 1 && $file == all && $op == put ]] ; then
  echo Purging the CODE stage...
  snowsql -o log_level=DEBUG  ${conn} -q "REMOVE @CODE/"
fi

if [[ $op == put ]] ; then
  snowsql -o log_level=DEBUG  ${conn} -q "PUT file://${PATTERN} @CODE/ AUTO_COMPRESS=FALSE OVERWRITE=TRUE"
  snowsql -o log_level=DEBUG  ${conn} -q "ALTER STAGE CODE REFRESH"
fi

check_result(){
  local result=$1
  status=`echo "$result" | jq -r '.status'`
  if [[ $status == failed ]] ; then
    echo "$result" | jq -r '.data' >&2
    exit 1
  else
    echo "$result" | jq -r '.data'
  fi
}

snowsql_proc_default="snowsql -o friendly=false -o header=false  -o timing=false -o output_format=plain -o log_level=DEBUG  ${conn}"

# Import and Export
if [[ $type == all ]] ; then
  RT=*
  RN=*
else
  RT=$type
  if [[ -z $resource ]] ; then
    RN=*
  else
    RN=$resource
  fi
fi

if [[ $delete -eq 1 ]] ; then
  DELETE_ALL=TRUE
else
  DELETE_ALL=FALSE
fi

if [[ $op == export && $local == 0 ]] ; then
  check_result "`${snowsql_proc_default} -q "CALL SW_EXPORT_RESOURCES('${RT}','${RN}',${DELETE_ALL})"`"
fi

if [[ $op == export  && $local == 1 ]] ; then
  check_result "`${snowsql_proc_default} -q "CALL SW_EXPORT_RESOURCE('${RT}','${RN}')"`" > ${RT}_${RN}.yaml
  echo ${RT} ${RN} has been exported to ${RT}_${RN}.yaml.
fi


if [[ $op == import && $local == 0 ]] ; then
  check_result "`${snowsql_proc_default} -q "CALL SW_IMPORT_RESOURCES('${RT}','${RN}',${DELETE_ALL})"`"
fi


if [[ $op == import  && $local == 1 ]] ; then
  RDATA=$(cat ${RT}_${RN}.yaml)
  RDATA=${RDATA//\'/\\\'}
  echo "CALL SW_IMPORT_RESOURCE('${RT}','${RN}','${RDATA}')" > tmp.sql
  check_result "`${snowsql_proc_default} -f tmp.sql`"
  rm tmp.sql
fi

# Test job component
if [[ $op == test && $type == job && "${test_file}" == "" ]] ; then
  check_result "`${snowsql_proc_default} -q "CALL SW_TEST_JOB_COMPONENTS('${job}','${components}')"`"
fi

if [[ $op == test && $type == job && "${test_file}" != "" ]] ; then
  TDATA=$(cat ${test_file})
  TDATA=${TDATA//\'/\\\'}
  echo "CALL SW_TEST_JOB_COMPONENT('${job}','${components}','${TDATA}')" > tmp.sql
  check_result "`${snowsql_proc_default} -f tmp.sql`"
  rm tmp.sql  
fi

# Test macro lib
if [[ $op == test && $type == lib && "${lib_file}" == "" ]] ; then
  check_result "`${snowsql_proc_default} -q "CALL SW_TEST_MACRO_LIB('${lib}')"`"
fi

if [[ $op == test && $type == lib && "${lib_file}" != ""  && "${test_file}" != "" ]] ; then
  LDATA=$(cat ${lib_file})
  LDATA=${LDATA//\'/\\\'}
  TDATA=$(cat ${test_file})
  TDATA=${TDATA//\'/\\\'}
  echo "CALL SW_TEST_MACRO_LIB('${lib}','${LDATA}','${TDATA}')" > tmp.sql
  check_result "`${snowsql_proc_default} -f tmp.sql`"
  rm tmp.sql  
fi

# Test function
if [[ $op == test && $type == func && "${def_file}" == "" ]] ; then
  check_result "`${snowsql_proc_default} -q "CALL SW_TEST_FUNCTION('${func}')"`"
fi

if [[ $op == test && $type == func && "${def_file}" != "" && "${test_file}" != "" ]] ; then
  LDATA=$(cat ${def_file})
  LDATA=${LDATA//\'/\\\'}
  TDATA=$(cat ${test_file})
  TDATA=${TDATA//\'/\\\'}
  echo "CALL SW_TEST_FUNCTION('${func}','${LDATA}','${TDATA}')" > tmp.sql
  check_result "`${snowsql_proc_default} -f tmp.sql`"
  rm tmp.sql  
fi

# Build
if [[ $op == build && ${job} == all ]] ; then
  check_result "`${snowsql_proc_default} -q "CALL SW_BUILD_INSTANCE('*')"`"
fi

if [[ $op == build && ${job} != all ]] ; then
  check_result "`${snowsql_proc_default} -q "CALL SW_BUILD_INSTANCE('${job}')"`"
fi

# Preview
if [[ $op == preview ]] ; then
  check_result "`${snowsql_proc_default} -q "CALL SW_PREVIEW_WEB_REQUEST('${job}')"`"
fi

# Make a test call
if [[ $posthook == 0 ]] ; then
  ENABLE_POSTHOOK=FALSE
else
  ENABLE_POSTHOOK=TRUE
fi

if [[ $op == testcall ]] ; then
  check_result "`${snowsql_proc_default} -q "CALL SW_MAKE_TEST_CALL('${job}',${ENABLE_POSTHOOK})"`"
fi
